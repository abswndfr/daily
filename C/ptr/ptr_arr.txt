#include <stdio.h>

int main() {
    // array of array of int : row major implementation
    int a[3][3] = {{6,2,5},
                   {0,1,3},
                   {4,9,8}};
   
    int *p;
    //p = a;    // X
    //p = a[0];    
    p = &a[0][0];    

    for(int i = 0; i<9; i++) {
        printf("%p %d\n", p + i, *(p + i));        
        if(i%3 == 2)
            printf("\n");
    }
    printf("\n");

    printf("a[1]        %zu .. %p\n", a[1], a[1]);    
    printf("a[1] + 1    %zu .. %p\n", a[1]+1, a[1]+1);
    printf("*(a[1] + 1) %zu .. %p\n", *(a[1]+1), *(a[1]+1)); 
    printf("\n");

    printf("&a[1]       %u .. %p\n", &a[1], &a[1]);    
    printf("&a[1] + 1   %u .. %p\n", &a[1]+1, &a[1]+1);
    printf("*(&a[1] + 1)%u .. %p\n", *(&a[1]+1), *(&a[1]+1));
    printf("*(*(&a[1] + 1))%u .. %p\n", *(*(&a[1]+1)), *(*(&a[1]+1)));
    printf("\n");
    
    //int *ptr = &a[1] + 1;             // type mismatch
    //int *ptr = (int *) (&a[1] + 1);   // *p == a[2][0]
    int *ptr = (int *) &a[1] + 1;       // *p == a[1][1]
    
    printf("%zu %p\n", ptr, ptr);
    printf("%zu %p\n", *ptr, *ptr);

    return 0;
}


#include <stdio.h>

int main() {
    // array of array of int : row major implementation
    int a[3][3] = {{6,2,5},
                   {0,1,3},
                   {4,9,8}};
   
    int *p;
    //p = a;    // X
    //p = a[0];    
    p = &a[0][0];    

    for(int i = 0; i<9; i++) {
        printf("%p %d\n", p + i, *(p + i));        
        if(i%3 == 2)
            printf("\n");
    }
    printf("\n");
/*
    printf("&a[0][0]    %u .. %p\n", &a[0][0], &a[0][0]);
    printf("&a[0][1]    %u .. %p\n", &a[0][1], &a[0][1]);
    printf("&a[1][0]    %u .. %p\n", &a[1][0], &a[1][0]);    
    printf("\n");
*/
    printf("a           %u .. %p\n", a, a);    
    printf("a + 1       %u .. %p\n", a+1, a+1);
    printf("\n");

    printf("*a          %u .. %p\n", *a, *a);    
    printf("*a + 1      %u .. %p\n", *a+1, *a+1);
    printf("\n");

    printf("&a          %u .. %p\n", &a, &a);    
    printf("&a + 1      %u .. %p\n", &a+1, &a+1);
    printf("\n");

    printf("a[0]        %u .. %p\n", a[0], a[0]);    
    printf("a[0] + 1    %u .. %p\n", a[0]+1, a[0]+1);        
    printf("\n");

    printf("&a[0]       %u .. %p\n", &a[0], &a[0]);    
    printf("&a[0] + 1   %u .. %p\n", &a[0]+1, &a[0]+1);        
    printf("\n");

    printf("*a[0]       %u .. %p\n", *a[0], *a[0]);    
    printf("*a[0] + 1   %u .. %p\n", *a[0]+1, *a[0]+1);        
    printf("\n");

    printf(" *a          %u .. %p\n", *a, *a);    
    printf("*(a + 1)     %u .. %p\n", *(a+1), *(a+1));
    printf("*(a + 1) + 2 %u .. %p\n", *(a+1)+2, *(a+1)+2);
    printf("*(*a + 1)    %u .. %p\n", *(*a+1), *(*a+1));
    printf("\n");

    return 0;
}