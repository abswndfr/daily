N = 3                              
M = 2                              
rs = []                                                                                             
chk = [False] * (N+1)                                               

def recur(num):                                                                                     
    if num == M:                      
        print(rs)                          
        return

    for i in range(1, N+1):
        if chk[i] == False:
            chk[i] = True
            rs.append(i)
            recur(num+1)
            chk[i] = False
            rs.pop()					# backtrack

recur(0)		#[1, 2] [1, 3]	[2, 1]	[2, 3]	[3, 1]	[3, 2]

/*
https://herong.tistory.com/entry/CaseOfNumber-%EC%A1%B0%ED%95%A9-%EC%A4%91%EB%B3%B5%EC%A1%B0%ED%95%A9

import java.util.Arrays;

public class MyCombi {
    static int[] data = { 1,2,3,4 };
    static int[] res;
    static boolean[] visit;

    public static void main(String[] args) {
        int N = 4, R = 2;
        res = new int[R];
        visit = new boolean[N];

        solve2(N, R, 0);
    }

    private static void solve2(int n, int r, int depth) {
        if (depth == r) {
            System.out.println(Arrays.toString(res));
            return;
        }

        for (int i = 0; i < n; i++) {
            if (visit[i] == false) {
                visit[i] = true;
                
                res[depth] = data[i];
                solve2(n, r, depth + 1);
                
                visit[i] = false;
            }
        }
    }
}

//[1, 2] [1, 3] [1, 4] 
//[2, 1] [2, 3] [2, 4]
//[3, 1] [3, 2] [3, 4]
//[4, 1] [4, 2] [4, 3]
*/
