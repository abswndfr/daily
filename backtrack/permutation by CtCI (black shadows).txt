/*
 * Q 8.4 Write a method to compute all permutations of a string.     https://github.com/black-shadows/Cracking-the-Coding-Interview/blob/master/Solutions/Chapter%208%20Recursion/8.4.cpp
 */

#include <iostream>
#include <string>
#include <vector>
using namespace std;

typedef vector<string> vs;

// CtCI approach #1
vs permu(string s)
{
    vs result;                              // set of all permuations
    if (s == "") {
        result.push_back("");
        return result;
    }
    string c = s.substr(0, 1);              // remove first charater
    vs res = permu(s.substr(1));            // call permu with the remainder and get permuations

    for (int i = 0; i < res.size(); ++i)
    {
        string t = res[i];
        for (int j = 0; j <= t.length(); ++j) {   // j <= len not j < l   !!
            string u = t;
            u.insert(j, c);                 // add first chacter to the returned permutation at every possible position
            result.push_back(u);
        }
    }
    return result;//
}

// CtCI approach #2
vs permu1(string s)
{
    vs result;
    if (s == "") {
        result.push_back("");
        return result;
    }

    for (int i = 0; i < s.length(); ++i) {
        string c = s.substr(i, 1);                  // c = charAt(i)
        string t = s;                               // make a copy of the org. string

        vs res = permu1(t.erase(i, 1));             // get all permutations of remainder

        for (int j = 0; j < res.size(); ++j) { 
            result.push_back(c + res[j]);           // c + permutations of remainder
        }
    }
    return result;
}

int main()
{
	string s = "abc";
	vs res = permu1(s);
	for (int i = 0; i < res.size(); ++i)
		cout<<res[i] << endl;
	return 0;
}
