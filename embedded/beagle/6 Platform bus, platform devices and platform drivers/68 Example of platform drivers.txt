
Hey, welcome back to the lecture.

Let's see some examples of platform drivers, and I'm going to consider the SOC from Texas

instruments, that is AM335X.

This is a main SOC, which is being used in our Beagle bone black hardware.

This SOC, here you can see the functional block diagram of this SOC and you can see that

this is powered by ARM- Cortex -A8 processor, which can run upto 1 Ghz of speed.

And this SOC comprises of a lots of peripherals, on chip peripherals, such as it has got LCD controller, inbuilt

touchscreen controller,

it has got graphics chip,

it has got a various a serial communication controllers or peripherals such as UART.

So, it has got 6

UARTs, 2 SPI, 3 I2C controllers, and CAN,USB, McASP, and some of the system related

peripherals such as Watch dog timer, RTC, memory interfaces for external memory interfacing.

And it also supports a various parallel data communication

peripherals such as a MMC, SD, SDIO controller, GPIO controller,

all these are actually on chip peripherals of this SOC.

All of these are actually considered as platform devices.

TI also gives a the drivers for all of these platform devices.

Here, I have tabulated a for some of the peripherals such as I2C, SPI, USB, CAN, etc..And these are the locations where you can find the drivers for these peripherals.

Let me clarify one thing here. The drivers what you find at these locations are actually called as a

controller drivers or they are actually called as a bus drivers. For example,

let's say, you have the SOC here and you have on chip I2C peripheral.

Now, this I2C peripheral is connected to couple of a I2C devices, such as temperature sensor, gyroscope, etc. through the I2C bus.

In this scenario, these are I2C devices

remember or also called as I2C clients.And this on chip I2C peripheral is a controller,

it's called as I2C host controller, or I2C bus controller, or simply I2C controller.

Why?

Because, this peripheral controls the bus transactions on the I2C bus.It initiates the data transfer,

it closes the data transfer, like that, isn't it?

That's why, what you see inside the chip, we call it as a controller.

So, in this case, we can simply call it as a I2C controller.

Whenever someone says, I'm writing a I2C device driver, then most probably he's saying, he's

writing a driver for the I2C device, which is connected to the I2C controller over the I2C bus. Basically, he is not referring to writing a driver for the I2C controller.For the on chip controllers

the driver is most probably it is already given by the vendor itself.

That's what this table shows.

This is a SPI controller driver, which is given by the TI. This is a I2C master mode driver

or I2C controller driver.

So, this is a CAN controller driver.

This is a SDIO MMC controller driver.

Most of the time, you'll not be writing a this controller drivers. As I said, it is already given by

the SOC vendor.

I hope that clarifies the difference between a device and a controller. A controller always controls

a device and the controller drivers are already available, which is given by the SOC vendor.