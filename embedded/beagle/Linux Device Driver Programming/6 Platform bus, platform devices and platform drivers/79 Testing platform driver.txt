
In this lecture,a let's do some testing.First, let's build the project.

The build was fine. And before testing, let me remove any previously loaded a kernel modules.Please

remove them if you have any.

You can always run lsmod command to see all the modules which are currently loaded.

This actually list all the kernel modules.

First, let's load the device setup kernel module or you can even load the platform driver module.

So, the order doesn't matter actually.

Let me first load device_setup.ko, so the load was fine.

And you can see that

device setup module loaded.

And now let's load our driver.

Let's run dmesg and here it is.

The probe was called.These are all the messages printed by our probe, because of the matched platform

devices.

This was the first match,

the serial number is this one, size, permission, which is printed in a decimal.

And this was the second device which is detected.So, the probe was successful.

Let's remove the device setup

module.What do you expect when you remove a device set up? So, you are going to unregister the platform

devices. The remove method

should get called in our driver.

Let's see. Hit enter, run

dmesg and here it is.

The remove function was called, a device is removed and the release function was called here, and after that, another

device is removed and device setup module is unloaded.

If you do lsmod, you can see that, there is our platform driver is still hooked up and it is used

by none.

Let's remove our platform driver.Sorry, remove.

And the driver is unloaded, no problem.No crash,

everything was fine.So, now both the drivers have been unloaded and now let's try to load the platform

driver first.

So, I'm going to load the platform driver first. dmesg, pcd platform driver loaded and now

let's try to load the device setup kernel module.Here it is.

The probe was called and the details got printed.

And now let's first remove the driver itself.

I'm going to remove the driver.

If you just see here.

You can see that, both drivers are present.

I'm going to remove this driver.

So, when you remove the driver, what would you expect?

You should expect the remove function getting called. Because, the driver is going away and before going

away it should cleanup the devices.

Let's remove the driver.

Here it is.You can see that, the remove function was executed here twice

and the devices have been removed here, then pcd platform driver unloaded.

Now, let's remove the device setup.

The driver is not present

now, the driver has already unloaded.

Now, you are going to remove the platform devices.

What do you expect? do you expect remove function to be called?

No, right?

Because, the driver is not present.

The platform code handles everything internally.

But, in this case, only release function you will get called.Here it is.

In this release function, you can cleanup any platform specific things. Like you can deallocate if

you have allocated any memory for the platform data or something like that.

We didn't face any crashes here.

If you find any crash while loading or unloading drivers, or during a probe execution, something like that,

You just have to fix that problem and then you may have to reboot your machine before loading the driver

again.

So, that's it for this lecture and in the next lecture,

let's improve our code to add more features.

We completed probe and remove functions and also we completed init and cleanup functions,

I will leave other driver methods such as open, read, lseek, release, so those methods you should

implement

now. I don't think it will be difficult, because we have already implemented twice in the previous

exercises.

I hope you can do that.

And if you need any help, then the whole code is present in our repository,

please, take the reference from that.In the next lecture,

let's explore some more APIs about a managing platform devices and resources, and I will see you in the next lecture.

