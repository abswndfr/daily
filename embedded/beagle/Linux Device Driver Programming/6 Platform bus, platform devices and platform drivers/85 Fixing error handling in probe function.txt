
Hey, welcome back to the lecture.In the previous lecture,

I actually said that,

when you use a resource to managed API such as a devm_kzalloc().

So, what I said was, in the probe function, you have to use a

devm_kfree to release it manually, but that is actually not true.

Because, I was going through the code and I found something, so which I would like to share.

Actually, your probe function, the probe function of the driver will get called by the function called

really_probe, which is there in dd.c, base/dd.c.

You have to go to a linux, drivers, and go to base, here you dd.c.

Here it is. And here, search for really_probe.

From this function, the prob e function of your driver gets called.

You can see that here.

Let me maximize this.

So, you can see here driver probe.

It calls the driver's probe method here.

If the return value is non-zero and it jumps to the probe failed, which is right here probe failed.

And you see here, devres_release_all(). This function releases all the resources held by struct

device.

That's why, if probe fails, the memory which is held by that device will be freed automatically.

Let's go to this function devres_release_all.

Release all managed resources.

This executes and your memory will be released.

That's why, I would like to make a correction now.

So, this buffer_free is not required.

Let's remove that.

We can make this error handling pretty simple,

I will show you.Now, this goto cdev_del is not required.

So, I'll remove this jump.

I will just a cut this code from here

and I'll paste here.

If the device_create fails, then get the error code in ret, delete the cdev and just return.

So, that's why, let me remove this a

cdev_del, and let me remove this print statement also,

and let's remove this as well.

I just removed everything.

Let's go here, and instead of this goto out let's just return here itself.

After that, so here also

just remove that and just return

ENOMEM.

And after that,here as well.

So, here also just return.

Just remove this. cdev_add

and if return is less than 0, then just print "cdev_add failed" and return.

Yes, now it looks simple, isn't it?

You can keep one print statement here.

Instead of a pr_info you can also use dev_info,

that would be better for resource managed a printing. But for the time being, let's tick to a

pr_info.

So, here you can print a "probe was successful".

And just return zero. And if there is any error in between, then the code will return there itself.

That's why, need not to separately implement the error handling at the bottom.