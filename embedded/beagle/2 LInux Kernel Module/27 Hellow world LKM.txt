001hello_world



In this lecture, let's implement hello world kernel module and let's test it, then will explore how to build

it.

Let's get back to our source, oh! not source, sorry. Just go to custom_drivers folders and here create one

folder.

Let's start with hello_world.

001hello

world. Here, just

get inside this hello_world folder,

and here just create one file main.c.

Let's open main.c, you can use your favorite text editors.

I'll be using vim or you can even use gedit or your favorite text editors.

First, we have to include the header file.

Let's do that.

We have to include the kernel header file with respect to the Linux folder.Linux

module.h.

If you are not sure about that, let me save and exit this.

Let's go to the source and linux.

Here, there's a folder called include,

and here there's a folder call linux,

here you find most of the kernel headers.

We are including a header file with respect to this folder linux, in the kernel source tree.

After that, let's write our module initialization function and module clean-up function. Static int

__init

and let's give a name for our module initialization function. I would give helloworld

any name you can give.

helloworld

init. I would just give that, helloworld_init.

And it doesn't take any argument so void,

that's it. Just close this.

And now let's write module clean-up function.Static void __exit

helloworld_cleanup(void).

and give the function body. That's it. After that register, module_init give this name. That's it.

After that, module_exit(). These are registration.

And MODULE

LICENSE.Just give "GPL" in capital letters,

MODULE_AUTHOR("Me"), MODULE_DESCRIPTION

"A simple helloworld

kernel module".

And after that, you can give MODULE_INFO, a more info. I would want to mention what board I'm using, I would

just write

board, "Beagle bone black REV A5".Fair enough.

This is a module initialization function, which gets loaded whenever you load a kernel module into the

kernel. Let's sends some message to the world.

For that, you can use printf statement. But you cannot use printf statements of the C standard library.

So, kernel has it's own printf.

We'll explore about kernel printf's later.

Just use this function

pr_info("Hello world").

Actually, this is a macro which is a wrapper around kernels a printf. That what we call as print k.

So, it's a wrapper around that. Will explore more on a these kernel printing services later.

This works exactly as printfs, what we have used in our userspace programs.

Just the name is different, just give it as pr_info, and pr_info

this is hello world, sorry.

Here we can write "Goodbye world".

Remember that the module initialization function must return a value. If it is success, it must return 0.

For that purpose so I would use here zero.

If it is non-zero, then module insertion will get failed. So, module will not get loaded into the kernel.

That's why, for this example, let's use 0. For other examples for real drivers you will be returning

some error codes or something like that.

But here we are not dealing with any kernel APIs, something like that.

We can just use return 0.

It just prints and returns zero. That's it.

I hope most of the things are implemented here, and in the next lecture let's build this. But before

that, we have to understand the build system. I will see you in the next lecture.