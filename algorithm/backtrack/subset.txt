'''
1 -> 2 -> 3
1->  2 -> .

1 -> . -> 3
1 -> . -> .

. -> 2 -> 3
. -> 2 -> .

. -> . -> 3

. -> . -> .
'''
class Solution:												
    def subsets(self, nums: List[int]) -> List[List[int]]:
        res = []

        subset = []

        def dfs(i):
            if i >= len(nums):
                res.append(subset.copy())
                return

            # decision to include nums[i]
            subset.append(nums[i])							#=============
            dfs(i + 1)

            # decision NOT to include nums[i]				#=============
            subset.pop()
            dfs(i + 1)

        dfs(0)
        return res


class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()

        def backtrack(i, subset):
            if i == len(nums):
                res.append(subset[::])
                return

            # All subsets that include nums[i]
            subset.append(nums[i])							#=============
            backtrack(i + 1, subset)
            subset.pop()									#=============

            # All subsets that don't include nums[i]
            while i + 1 < len(nums) and nums[i] == nums[i + 1]:
                i += 1
            backtrack(i + 1, subset)

        backtrack(0, [])
        return res



class Solution(object):
    def canPartitionKSubsets(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """

        if sum(nums) % k != 0:
            return False

        nums.sort(reverse = True)
        target = sum(nums) / k
        visited= set()

        def backtrack(idx, count, currSum):
            if count == k:
                return True

            if target == currSum:
                return backtrack(0, count + 1, 0)

            for i in range(idx, len(nums)):
                
                # skip duplicates if last same number was skipped
                if i > 0 and (i - 1) not in visited and nums[i] == nums[i - 1]:
                    continue

                if i in visited or currSum + nums[i] > target:
                    continue

                visited.add(i)								#=============

                if backtrack(i + 1, count, currSum + nums[i]):
                    return True
                
                visited.remove(i)							#=============

            return False


        return backtrack(0, 0, 0)



https://www.geeksforgeeks.org/backtracking-to-find-all-subsets/

include <bits/stdc++.h>
using namespace std;

void subsetsUtil(vector<int>& A, vector<vector<int>>& res, vector<int>& subset, int index)
{
    res.push_back(subset);
    for (int i = index; i < A.size(); i++) {
        subset.push_back(A[i]);
        subsetsUtil(A, res, subset, i + 1);
        subset.pop_back();
    }
 
    return;
}
 
vector<vector<int>> subsets(vector<int>& A)
{
    vector<int> subset;
    vector<vector<int> > res;

    int index = 0;
    subsetsUtil(A, res, subset, index);
 
    return res;
}
 
int main()
{
    vector<int> array = { 1, 2, 3 };
    vector<vector<int> > res = subsets(array);
 
    for (int i = 0; i < res.size(); i++) {
        for (int j = 0; j < res[i].size(); j++)
            cout << res[i][j] << " ";
        cout << "," << endl;
    }
 
    return 0;
}