'''
4C2 = 6

1 -> 2    
  -> 3    2 -> 3  
  -> 4      -> 4    3 -> 4

4C3 = 4
1 -> 2 -> 3   
  -> 2 -> 4     

  -> 3 -> 4     2 -> 3 -> 4
'''


class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        res = []
		
        def helper(start, comb):

            if len(comb) == k:
                res.append(comb.copy())
                return

            for i in range(start, n+1):			# permutation with duplicates if it's range(1, n+1)
                comb.append(i)					#=============
                helper(i+1, comb)
                comb.pop()						#=============

        helper(1, [])
        return res


class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        res = []

        def dfs(i, cur, total):
            if total == target:
                res.append(cur.copy())
                return
            if i >= len(candidates) or total > target:
                return

            cur.append(candidates[i])							#=============
            dfs(i, cur, total + candidates[i])
            cur.pop()											#=============
            dfs(i + 1, cur, total)	

        dfs(0, [], 0)
        return res


class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()

        res = []

        def backtrack(cur, pos, target):
            if target == 0:
                res.append(cur.copy())
                return
            if target <= 0:
                return

            prev = -1
            for i in range(pos, len(candidates)):
                if candidates[i] == prev:
                    continue
                cur.append(candidates[i])						#=============
                backtrack(cur, i + 1, target - candidates[i])
                cur.pop()										#=============
                prev = candidates[i]	

        backtrack([], 0, target)
        return res


class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        res = []
        digitToChar = {
            "2": "abc",
            "3": "def",
            "4": "ghi",
            "5": "jkl",
            "6": "mno",
            "7": "qprs",
            "8": "tuv",
            "9": "wxyz",
        }

        def backtrack(i, curStr):
            if len(curStr) == len(digits):
                res.append(curStr)
                return
				
            for c in digitToChar[digits[i]]:
                backtrack(i + 1, curStr + c)

        if dig
		its:
            backtrack(0, "")

        return res
		
# Input: digits = "23"
# Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]		


https://www.geeksforgeeks.org/print-all-possible-combinations-of-r-elements-in-a-given-array-of-size-n/

#include <stdio.h>

#include <stdio.h>

// nCr
#define N 4
#define R 2

int arr[] = {1,2,3,4,5,6,7};
int buf[R];

void printArr()
{
    for(int i=0; i<R; i++) {
        printf("%d ", buf[i]);
    }   
    printf("\n");
}

void comb(int arr_index, int buf_index)
{
    if(buf_index == R) {
        printArr();
        return;
    }

    for(int i=arr_index; i<N; i++) {
        buf[buf_index] = arr[i];       
        comb(i+1, buf_index+1);
    } 
}

int main()
{
    comb(0, 0);
}
