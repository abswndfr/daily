# without duplicates : Leetcode 46
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res = []

        # base case
        if len(nums) == 1:   
            return [nums[:]]               # [nums[:]] is a deep copy

        for i in range(len(nums)):
            n = nums.pop(0)									

            perms = self.permute(nums)
            for perm in perms:
                perm.append(n)					

            res.extend(perms)
		
            nums.append(n)				# backtrack
        return res		

nums = [1,2,3]
#print(len(nums), nums)
s = Solution()
print(s.permute(nums))


# with duplicates : Leetcode 47
class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        result = []
        counter = collections.Counter(nums)

        def backtrack(perm, counter):
            if len(perm) == len(nums):
                result.append(perm.copy())

            for n in counter:
                if counter[n] == 0:
                    continue
                perm.append(n)								
                counter[n] -= 1
                backtrack(perm, counter)
                perm.pop()				     # backtrack
                counter[n] += 1

        backtrack([], counter)

        return result
