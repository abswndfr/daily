# https://www.geeksforgeeks.org/rat-in-a-maze-backtracking-using-stack/
# Python3 program to solve Rat in a maze
# problem with backtracking using stack
 
N=4
M=5
 
class node:
    def __init__(self,i,j):
        self.x=i
        self.y=j
        self.dirn=0

n = N; m = M

fx=0; fy=0
visited=[[True]*N for _ in range(M)]
 
def isReachable(maze):
    i = 0; j = 0
     
    s=[]
    temp=node(i, j)
    s.append(temp)
 
    while s:
        temp = s.pop()
        d = temp.dirn
        i = temp.x; j = temp.y
 
        temp.dirn += 1
        s.append(temp)
 
        if (i == fx and j == fy):
            return True
  
        if (d == 0):																		# 0 up: i-1, j
            if (i - 1 >= 0 and maze[i - 1][j] and visited[i - 1][j]):
                temp1=node(i - 1, j)
                visited[i - 1][j] = False
                s.append(temp1)
 
        elif (d == 1):																		# 1 <-: i, j-1
            if(j - 1 >= 0 and maze[i][j - 1] and visited[i][j - 1]):
                temp1=node(i, j - 1)
                visited[i][j - 1] = False
                s.append(temp1)
 
        elif (d == 2):																		# 2 down: i+1, j		
            if(i + 1 < n and maze[i + 1][j] and visited[i + 1][j]):
                temp1=node(i + 1, j)
                visited[i + 1][j] = False
                s.append(temp1)
         
        elif (d == 3):																		# 3 ->:	i, j+1
            if (j + 1 < m and maze[i][j + 1] and visited[i][j + 1]):
                temp1=node(i, j + 1)
                visited[i][j + 1] = False
                s.append(temp1)
 
        else:
            visited[temp.x][temp.y] = True
            s.pop()
 
    return False
 
if __name__ == '__main__':
 
    maze = [
        [ 1, 0, 1, 1, 0 ],
        [ 1, 1, 1, 0, 1 ],
        [ 0, 1, 0, 1, 1 ],
        [ 1, 1, 1, 1, 1 ]
    ]
 
    fx = 2
    fy = 3
 
    if (isReachable(maze)):
        print("Path Found!")
    else:
        print("No Path Found!")